{ message: 'Listening on port 8080', level: 'info' }
{
  message: {
    function: 'ProductService.createProduct',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:13:45
    
      10 public createProduct =async (createProductDto:CreateProductDto):Promise<IResponse>=>{
      11     let response:any
      12     try{
    → 13         response =await this.prisma.create({
                   data: {
                     description: 'Thanos underwere',
                     stock: 1225,
                     rate: 5,
                     price: 152,
                     category: 'Toxic Waste',
                 +   name: String,
                 ?   id?: String,
                 ?   createdAt?: DateTime,
                 ?   updatedAt?: DateTime
                   }
                 })
    
    Argument name for data.name is missing.
    
    Note: Lines with + are required, lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at rn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:13651)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10955
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10944)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.createProduct',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:13:45
    
      10 public createProduct =async (createProductDto:CreateProductDto):Promise<IResponse>=>{
      11     let response:any
      12     try{
    → 13         response =await this.prisma.create({
                   data: {
                     description: 'Thanos underwere',
                     stock: 1225,
                     rate: 5,
                     price: 152,
                     category: 'Toxic Waste',
                 +   name: String,
                 ?   id?: String,
                 ?   createdAt?: DateTime,
                 ?   updatedAt?: DateTime
                   }
                 })
    
    Argument name for data.name is missing.
    
    Note: Lines with + are required, lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at rn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:13651)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10955
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10944)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductController.CreateProductDto',
    dto: {
      description: 'Thanos underwere',
      stock: 1225,
      rate: 5,
      price: 152,
      category: 'Toxic Waste'
    }
  },
  level: 'debug'
}
{
  message: {
    function: 'ProductController.CreateProductDto',
    dto: {
      name: 'The Meolindir',
      description: 'Thanos underwere',
      stock: 1225,
      rate: 5,
      price: 152,
      category: 'Toxic Waste'
    }
  },
  level: 'debug'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientInitializationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Error in connector: Error creating a database connection. (An error occurred during DNS resolution: no record found for name: _mongodb._tcp.dcsweb.snm3hyr.mongodb.net.fibertel.com.ar. type: SRV class: IN)
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6750)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3087
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3294
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10748)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientInitializationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Error in connector: Error creating a database connection. (An error occurred during DNS resolution: no record found for name: _mongodb._tcp.dcsweb.snm3hyr.mongodb.net.fibertel.com.ar. type: SRV class: IN)
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6750)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3087
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3294
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10748)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Unique constraint failed on the constraint: `Users_username_key`
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2002',
      clientVersion: '4.12.0',
      meta: { target: 'Users_username_key' }
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.listUsers',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.findMany()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:57:44
    
      54 },
      55 public listUsers = async () => {
      56   try {
    → 57     const response = await this.prisma.findMany(
    Raw query failed. Code: `unknown`. Message: `failed to lookup address information: Name or service not known`
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2010',
      clientVersion: '4.12.0',
      meta: {
        code: 'unknown',
        message: 'failed to lookup address information: Name or service not known'
      }
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.deleteUser',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.delete()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:66:50
    
      63 },
      64 public deleteUser = async (id: string): Promise<IResponse> => {
      65   try {
    → 66     const response = await this.prisma.delete(
    An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: { cause: 'Record to delete does not exist.' }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    An operation failed because it depends on one or more records that were required but not found. Record to update not found.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: { cause: 'Record to update not found.' }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.productById',
    error: NotFoundError [PrismaClientKnownRequestError]: No Products found
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6701
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6641 {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.productById',
    error: NotFoundError [PrismaClientKnownRequestError]: No Products found
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6701
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6641 {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.productById',
    error: NotFoundError [PrismaClientKnownRequestError]: No Products found
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6701
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6641 {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1171", length 23.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2023',
      clientVersion: '4.12.0',
      meta: {
        message: 'Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1171", length 23.'
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1170", length 23.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2023',
      clientVersion: '4.12.0',
      meta: {
        message: 'Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1170", length 23.'
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1173", length 23.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2023',
      clientVersion: '4.12.0',
      meta: {
        message: 'Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1173", length 23.'
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    An operation failed because it depends on one or more records that were required but not found. Record to update not found.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: { cause: 'Record to update not found.' }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartService.createCart',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.service.ts:13:38
    
      10 public createCart = async (createCartDto: CreateCartDto) => {
      11   let response: any
      12   try {
    → 13     response = await this.prisma.create({
               data: {
                 user: {
                   name: 'String',
                   lastName: 'String',
                   username: 'String',
                   phoneNumber: 111,
                   address: {
                     street: 'String',
                     number: 111,
                     city: 'String',
                     zipCode: 'String'
                   },
             +     id: String
                 },
                 products: {
                   id: 'String',
                   name: 'String',
                   description: 'String',
                   quantity: 2,
                   price: 125,
                   stock: 122,
                   rate: 3,
                   category: 'String'
                 }
               }
             })
    
    Argument id for data.user.id is missing.
    
    Note: Lines with + are required
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:30:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:33:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:33:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:34:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:35:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartService.deleteCart',
    error: PrismaClientValidationError: 
    Invalid `prisma.carts.delete()` invocation:
    
    {
      where: {
    ?   id?: String
      }
    }
    
    Argument where of type CartsWhereUniqueInput needs at least one argument. Available args are listed in green.
    
    Note: Lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at processTicksAndRejections (node:internal/process/task_queues:95:5) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:59:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:59:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:59:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartService.cartById',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.findUniqueOrThrow()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.service.ts:67:38
    
      64 public cartById = async (id: string) => {
      65   let response: any
      66   try {
    → 67     response = await this.prisma.findUniqueOrThrow({
               where: {
             ?   id?: String
               }
             })
    
    Argument where of type CartsWhereUniqueInput needs at least one argument. Available args are listed in green.
    
    Note: Lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at processTicksAndRejections (node:internal/process/task_queues:95:5) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
