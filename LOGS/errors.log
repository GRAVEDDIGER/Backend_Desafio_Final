{ message: 'Listening on port 8080', level: 'info' }
{
  message: {
    function: 'ProductService.createProduct',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:13:45
    
      10 public createProduct =async (createProductDto:CreateProductDto):Promise<IResponse>=>{
      11     let response:any
      12     try{
    → 13         response =await this.prisma.create({
                   data: {
                     description: 'Thanos underwere',
                     stock: 1225,
                     rate: 5,
                     price: 152,
                     category: 'Toxic Waste',
                 +   name: String,
                 ?   id?: String,
                 ?   createdAt?: DateTime,
                 ?   updatedAt?: DateTime
                   }
                 })
    
    Argument name for data.name is missing.
    
    Note: Lines with + are required, lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at rn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:13651)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10955
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10944)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.createProduct',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:13:45
    
      10 public createProduct =async (createProductDto:CreateProductDto):Promise<IResponse>=>{
      11     let response:any
      12     try{
    → 13         response =await this.prisma.create({
                   data: {
                     description: 'Thanos underwere',
                     stock: 1225,
                     rate: 5,
                     price: 152,
                     category: 'Toxic Waste',
                 +   name: String,
                 ?   id?: String,
                 ?   createdAt?: DateTime,
                 ?   updatedAt?: DateTime
                   }
                 })
    
    Argument name for data.name is missing.
    
    Note: Lines with + are required, lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at rn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:13651)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10955
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10944)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductController.CreateProductDto',
    dto: {
      description: 'Thanos underwere',
      stock: 1225,
      rate: 5,
      price: 152,
      category: 'Toxic Waste'
    }
  },
  level: 'debug'
}
{
  message: {
    function: 'ProductController.CreateProductDto',
    dto: {
      name: 'The Meolindir',
      description: 'Thanos underwere',
      stock: 1225,
      rate: 5,
      price: 152,
      category: 'Toxic Waste'
    }
  },
  level: 'debug'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientInitializationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Error in connector: Error creating a database connection. (An error occurred during DNS resolution: no record found for name: _mongodb._tcp.dcsweb.snm3hyr.mongodb.net.fibertel.com.ar. type: SRV class: IN)
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6750)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3087
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3294
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10748)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientInitializationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Error in connector: Error creating a database connection. (An error occurred during DNS resolution: no record found for name: _mongodb._tcp.dcsweb.snm3hyr.mongodb.net.fibertel.com.ar. type: SRV class: IN)
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6750)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3087
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:3294
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10748)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      clientVersion: '4.12.0',
      errorCode: undefined
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Unique constraint failed on the constraint: `Users_username_key`
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2002',
      clientVersion: '4.12.0',
      meta: { target: 'Users_username_key' }
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.listUsers',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.findMany()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:57:44
    
      54 },
      55 public listUsers = async () => {
      56   try {
    → 57     const response = await this.prisma.findMany(
    Raw query failed. Code: `unknown`. Message: `failed to lookup address information: Name or service not known`
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2010',
      clientVersion: '4.12.0',
      meta: {
        code: 'unknown',
        message: 'failed to lookup address information: Name or service not known'
      }
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.deleteUser',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.delete()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:66:50
    
      63 },
      64 public deleteUser = async (id: string): Promise<IResponse> => {
      65   try {
    → 66     const response = await this.prisma.delete(
    An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: { cause: 'Record to delete does not exist.' }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    An operation failed because it depends on one or more records that were required but not found. Record to update not found.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: { cause: 'Record to update not found.' }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.productById',
    error: NotFoundError [PrismaClientKnownRequestError]: No Products found
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6701
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6641 {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.productById',
    error: NotFoundError [PrismaClientKnownRequestError]: No Products found
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6701
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6641 {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.productById',
    error: NotFoundError [PrismaClientKnownRequestError]: No Products found
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6701
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:6641 {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: undefined
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1171", length 23.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2023',
      clientVersion: '4.12.0',
      meta: {
        message: 'Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1171", length 23.'
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1170", length 23.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2023',
      clientVersion: '4.12.0',
      meta: {
        message: 'Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1170", length 23.'
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1173", length 23.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2023',
      clientVersion: '4.12.0',
      meta: {
        message: 'Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: "643c612b10e9de8675b1173", length 23.'
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.updateProduct',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.update()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:24:38
    
      21 public updateProduct = async (updateProductDto: Partial<CreateProductDto>, id: string) => {
      22   let response: any
      23   try {
    → 24     response = await this.prisma.update(
    An operation failed because it depends on one or more records that were required but not found. Record to update not found.
        at fn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:6477)
        at fn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5907)
        at fn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:174:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:177:10477) {
      code: 'P2025',
      clientVersion: '4.12.0',
      meta: { cause: 'Record to update not found.' }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartService.createCart',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.service.ts:13:38
    
      10 public createCart = async (createCartDto: CreateCartDto) => {
      11   let response: any
      12   try {
    → 13     response = await this.prisma.create({
               data: {
                 user: {
                   name: 'String',
                   lastName: 'String',
                   username: 'String',
                   phoneNumber: 111,
                   address: {
                     street: 'String',
                     number: 111,
                     city: 'String',
                     zipCode: 'String'
                   },
             +     id: String
                 },
                 products: {
                   id: 'String',
                   name: 'String',
                   description: 'String',
                   quantity: 2,
                   price: 125,
                   stock: 122,
                   rate: 3,
                   category: 'String'
                 }
               }
             })
    
    Argument id for data.user.id is missing.
    
    Note: Lines with + are required
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:30:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:33:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:33:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:34:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.updateCart',
    error: TypeError: Cannot read properties of undefined (reading 'fields')
        at applyFluent (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5095)
        at Object.get (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:164:5336)
        at JSON.stringify (<anonymous>)
        at stringify (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:1150:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:271:14)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:35:44
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
  },
  level: 'error'
}
{
  message: {
    function: 'CartService.deleteCart',
    error: PrismaClientValidationError: 
    Invalid `prisma.carts.delete()` invocation:
    
    {
      where: {
    ?   id?: String
      }
    }
    
    Argument where of type CartsWhereUniqueInput needs at least one argument. Available args are listed in green.
    
    Note: Lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at processTicksAndRejections (node:internal/process/task_queues:95:5) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:59:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:59:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:59:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartController.listCarts',
    error: Error: Cannot set headers after they are sent to the client
        at new NodeError (node:internal/errors:399:5)
        at ServerResponse.setHeader (node:_http_outgoing:663:11)
        at ServerResponse.header (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:794:10)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:174:12)
        at ServerResponse.json (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:278:15)
        at ServerResponse.send (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/response.js:162:21)
        at /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.controller.ts:60:44 {
      code: 'ERR_HTTP_HEADERS_SENT'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'CartService.cartById',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.findUniqueOrThrow()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/carts/cart.service.ts:67:38
    
      64 public cartById = async (id: string) => {
      65   let response: any
      66   try {
    → 67     response = await this.prisma.findUniqueOrThrow({
               where: {
             ?   id?: String
               }
             })
    
    Argument where of type CartsWhereUniqueInput needs at least one argument. Available args are listed in green.
    
    Note: Lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at processTicksAndRejections (node:internal/process/task_queues:95:5) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: TypeError: price.forEach is not a function
        at SalesService.<anonymous> (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:15:15)
        at Generator.next (<anonymous>)
        at /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:8:71
        at new Promise (<anonymous>)
        at __awaiter (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:4:12)
        at SalesService.create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:10:71)
        at create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.controller.ts:12:20)
        at Layer.handle [as handle_request] (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/layer.js:95:5)
        at next (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:114:3)
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: TypeError: price.forEach is not a function
        at SalesService.<anonymous> (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:15:15)
        at Generator.next (<anonymous>)
        at /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:8:71
        at new Promise (<anonymous>)
        at __awaiter (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:4:12)
        at SalesService.create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:10:71)
        at create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.controller.ts:12:20)
        at Layer.handle [as handle_request] (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/layer.js:95:5)
        at next (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:114:3)
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: TypeError: price.forEach is not a function
        at SalesService.<anonymous> (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:15:15)
        at Generator.next (<anonymous>)
        at /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:8:71
        at new Promise (<anonymous>)
        at __awaiter (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:4:12)
        at SalesService.create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:10:71)
        at create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.controller.ts:12:20)
        at Layer.handle [as handle_request] (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/layer.js:95:5)
        at next (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:114:3)
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: TypeError: price.forEach is not a function
        at SalesService.<anonymous> (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:16:15)
        at Generator.next (<anonymous>)
        at /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:8:71
        at new Promise (<anonymous>)
        at __awaiter (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:4:12)
        at SalesService.create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:10:71)
        at create (/run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.controller.ts:12:20)
        at Layer.handle [as handle_request] (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/layer.js:95:5)
        at next (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/express/lib/router/route.js:114:3)
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.sales.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:21:44
    
      18 })
      19 const taxes: number = 0.21
      20 dto = { ...dto, totalWithoutTaxes: totalPrice, totalWithTaxes: totalPrice + (totalPrice * taxes) }
    → 21 response = await this.prisma.sales.create({
           data: {
             cart: {
               user: {
               ~~~~
                 id: 'stringid',
                 name: 'String',
                 lastName: 'String',
                 username: 'String',
                 phoneNumber: 111,
                 address: {
                   street: 'String',
                   number: 111,
                   city: 'String',
                   zipCode: 'String'
                 }
               },
               products: [
               ~~~~~~~~
                 {
                   id: 'String',
                   name: 'String',
                   description: 'String',
                   quantity: 2,
                   price: 125,
                   stock: 122,
                   rate: 3,
                   category: 'String'
                 }
               ]
             },
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             user: {
               name: 'string',
               username: 'strin',
               lastName: 'string',
               phoneNumber: 22,
               address: {
                 street: 'String',
                 number: 222,
                 city: 'String',
                 zipCode: 'String'
               },
               password: 'string',
               ~~~~~~~~
         +     id: String
             },
             totalWithoutTaxes: 250,
             totalWithTaxes: 302.5
                             ~~~~~
           }
         })
    
    Argument data.cart of type CartsTypeCreateEnvelopeInput needs exactly one argument, but you provided user and products. Please choose one. Available args: 
    type CartsTypeCreateEnvelopeInput {
      set?: CartsTypeCreateInput
    }
    Unknown arg `user` in data.cart.user for type CartsTypeCreateEnvelopeInput. Did you mean `set`?
    Unknown arg `products` in data.cart.products for type CartsTypeCreateEnvelopeInput. Did you mean `select`?
    Unknown arg `password` in data.user.password for type UserTypeCreateInput.
    Argument id for data.user.id is missing.
    Argument totalWithTaxes: Got invalid value 302.5 on prisma.createOnesales. Provided Float, expected Int.
    
    Note: Lines with + are required
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.sales.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:21:44
    
      18 })
      19 const taxes: number = 0.21
      20 dto = { ...dto, totalWithoutTaxes: totalPrice, totalWithTaxes: totalPrice + (totalPrice * taxes) }
    → 21 response = await this.prisma.sales.create({
           data: {
             cart: {
               set: {
               ~~~
                 user: {
                   id: 'stringid',
                   name: 'String',
                   lastName: 'String',
                   username: 'String',
                   phoneNumber: 111,
                   address: {
                     street: 'String',
                     number: 111,
                     city: 'String',
                     zipCode: 'String'
                   }
                 }
               },
               products: [
                 {
                   id: 'String',
                   name: 'String',
                   description: 'String',
                   quantity: 2,
                   price: 125,
                   stock: 122,
                   rate: 3,
                   category: 'String'
                 }
               ],
         +     id: String,
         +     createdAt: DateTime,
         +     updatedAt: DateTime,
         +     user: {
         +       name: String,
         +       lastName: String,
         +       username: String,
         +       phoneNumber: Int,
         +       address: AddressCreateInput,
         +       id: String
         +     }
             },
             user: {
               name: 'string',
               username: 'strin',
               lastName: 'string',
               phoneNumber: 22,
               address: {
                 street: 'String',
                 number: 222,
                 city: 'String',
                 zipCode: 'String'
               },
               password: 'string',
               ~~~~~~~~
         +     id: String
             },
             totalWithoutTaxes: 250,
             totalWithTaxes: 302.5
                             ~~~~~
           }
         })
    
    Unknown arg `set` in data.cart.set for type CartsTypeCreateInput. Did you mean `user`?
    Argument id for data.cart.id is missing.
    Argument createdAt for data.cart.createdAt is missing.
    Argument updatedAt for data.cart.updatedAt is missing.
    Argument user for data.cart.user is missing.
    Unknown arg `password` in data.user.password for type UserTypeCreateInput.
    Argument id for data.user.id is missing.
    Argument totalWithTaxes: Got invalid value 302.5 on prisma.createOnesales. Provided Float, expected Int.
    
    Note: Lines with + are required
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at processTicksAndRejections (node:internal/process/task_queues:95:5) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'SalesService.create',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.sales.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/sales/sales.service.ts:21:44
    
      18 })
      19 const taxes: number = 0.21
      20 dto = { ...dto, totalWithoutTaxes: totalPrice, totalWithTaxes: totalPrice + (totalPrice * taxes) }
    → 21 response = await this.prisma.sales.create({
           data: {
             cart: {
               user: {
               ~~~~
                 id: 'stringid',
                 name: 'String',
                 lastName: 'String',
                 username: 'String',
                 phoneNumber: 111,
                 address: {
                   street: 'String',
                   number: 111,
                   city: 'String',
                   zipCode: 'String'
                 }
               },
               products: [
               ~~~~~~~~
                 {
                   id: 'String',
                   name: 'String',
                   description: 'String',
                   quantity: 2,
                   price: 125,
                   stock: 122,
                   rate: 3,
                   category: 'String'
                 }
               ]
             },
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             user: {
               name: 'string',
               username: 'strin',
               lastName: 'string',
               phoneNumber: 22,
               address: {
                 street: 'String',
                 number: 222,
                 city: 'String',
                 zipCode: 'String'
               },
               password: 'string',
               ~~~~~~~~
         +     id: String
             },
             totalWithoutTaxes: 250,
             totalWithTaxes: 302.5
                             ~~~~~
           }
         })
    
    Argument data.cart of type CartsTypeCreateEnvelopeInput needs exactly one argument, but you provided user and products. Please choose one. Available args: 
    type CartsTypeCreateEnvelopeInput {
      set?: CartsTypeCreateInput
    }
    Unknown arg `user` in data.cart.user for type CartsTypeCreateEnvelopeInput. Did you mean `set`?
    Unknown arg `products` in data.cart.products for type CartsTypeCreateEnvelopeInput. Did you mean `select`?
    Unknown arg `password` in data.user.password for type UserTypeCreateInput.
    Argument id for data.user.id is missing.
    Argument totalWithTaxes: Got invalid value 302.5 on prisma.createOnesales. Provided Float, expected Int.
    
    Note: Lines with + are required
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at processTicksAndRejections (node:internal/process/task_queues:95:5) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.verifyLocalLogin',
    error: TypeError: Cannot read properties of null (reading 'username')
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:17:18
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.verifyLocalLogin',
    error: TypeError: Cannot read properties of null (reading 'username')
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:18:18
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.verifyLocalLogin',
    error: TypeError: Cannot use 'in' operator to search for 'username' in null
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:18:23
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.verifyLocalLogin',
    error: TypeError: req.flash is not a function
        at allFailed (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/passport/lib/middleware/authenticate.js:134:15)
        at attempt (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/passport/lib/middleware/authenticate.js:183:28)
        at Strategy.strategy.fail (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/passport/lib/middleware/authenticate.js:305:9)
        at verified (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/passport-local/lib/strategy.js:82:30)
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:21:16
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: TypeError: Cannot set properties of null (setting 'password')
        at SalesService.AuthService.validateUser (/run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:54:20)
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:34:18
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: TypeError: Cannot set properties of null (setting 'password')
        at SalesService.AuthService.validateUser (/run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:55:20)
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:34:18
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: TypeError: Cannot set properties of null (setting 'password')
        at SalesService.AuthService.validateUser (/run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:55:20)
        at /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:34:18
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.users.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:35:31
    
      32 else {
      33   const data: any = req.body
      34   this.validateUser(user, data, done)
    → 35   this.prisma.users.create({
             data: null
                   ~~~~
           })
    
    Argument data: Got invalid value null on prisma.createOneusers. Provided null, expected usersCreateInput or usersUncheckedCreateInput:
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.users.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:36:31
    
      33 const data: any = req.body
      34 const response = this.validateUser(user, data, done)
      35 console.log(response)
    → 36 this.prisma.users.create({
           data: {
             name: 'Adrian',
             username: 'aabadin@gmail.com',
             lastName: 'abadin',
             phoneNumber: 'Adrian',
                          ~~~~~~~~
             id: undefined,
             password: '111',
             ~~~~~~~~
             hash: '$2b$10$q3UuD/eQEoCk4.iRBY/qS.dbG/8YZhC/jGeRUmovlnOorBoiTlXTG'
           }
         })
    
    Argument phoneNumber: Got invalid value 'Adrian' on prisma.createOneusers. Provided String, expected Int.
    Unknown arg `password` in data.password for type usersCreateInput. Available args:
    
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.users.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:36:31
    
      33 const data: any = req.body
      34 const response = this.validateUser(user, data, done)
      35 console.log(response)
    → 36 this.prisma.users.create({
           data: {
             name: 'Adrian',
             username: 'aabadin@gmail.com',
             lastName: 'abadin',
             phoneNumber: 'Adrian',
                          ~~~~~~~~
             id: undefined,
             password: '111',
             ~~~~~~~~
             hash: '$2b$10$Y9FFkWJ2HwzaPqXj7S8s8OBbp0rM0A9KICyCqiZ5ASji7kmtwW9dy'
           }
         })
    
    Argument phoneNumber: Got invalid value 'Adrian' on prisma.createOneusers. Provided String, expected Int.
    Unknown arg `password` in data.password for type usersCreateInput. Available args:
    
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.users.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:36:31
    
      33 const data: any = req.body
      34 const response = this.validateUser(user, data, done)
      35 console.log(response)
    → 36 this.prisma.users.create({
           data: {
             name: 'Adrian',
             username: 'aabadin@gmail.com',
             lastName: 'abadin',
             phoneNumber: 15,
             id: undefined,
             password: '111',
             ~~~~~~~~
             hash: '$2b$10$qlElbBIsVXvZdWQYakx0oeai27lpmQ7wpm6r059JzduKtZnV1asOW'
           }
         })
    
    Unknown arg `password` in data.password for type usersCreateInput. Available args:
    
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.users.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:36:31
    
      33 const data: any = req.body
      34 const response = this.validateUser(user, data, done)
      35 console.log(response)
    → 36 this.prisma.users.create({
           data: {
             name: 'Adrian',
             username: 'aabadin@gmail.com',
             lastName: 'abadin',
             phoneNumber: 15,
             id: undefined,
             password: '111',
             ~~~~~~~~
             hash: '$2b$10$Q922EPsYeHHneHACF8SpheSEL7am.ONGm0sFyRWUbJG3vfEbpDTcy'
           }
         })
    
    Unknown arg `password` in data.password for type usersCreateInput. Available args:
    
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'AuthService.signUpLocal',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.users.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/auth/auth.service.ts:36:31
    
      33 const data: any = req.body
      34 const response = this.validateUser(user, data, done)
      35 console.log(response)
    → 36 this.prisma.users.create({
           data: {
             name: 'Adrian',
             username: 'aabadin@gmail.com',
             lastName: 'abadin',
             phoneNumber: 15,
             id: undefined,
             password: '111',
             ~~~~~~~~
             hash: '$2b$10$3Kl.JlhxCHugcyvnDmRB4.qAUqqavOW.MKBUZpRffd/iTBKLOHWwC'
           }
         })
    
    Unknown arg `password` in data.password for type usersCreateInput. Available args:
    
    type usersCreateInput {
      id?: String
      createdAt?: DateTime
      updatedAt?: DateTime
      name: String
      lastName: String
      username: String
      hash: String
      phoneNumber: Int
      Carts?: CartsTypeListCreateEnvelopeInput | CartsTypeCreateInput | List<CartsTypeCreateInput>
      sales?: salesCreateNestedManyWithoutUserInput
    }
    
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'ProductService.createProduct',
    error: PrismaClientValidationError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/products/products.service.ts:14:38
    
      11 public createProduct = async (createProductDto: CreateProductDto): Promise<IResponse> => {
      12   let response: any
      13   try {
    → 14     response = await this.prisma.create({
               data: {
                 username: 'aabadin@gmail.com',
                 ~~~~~~~~
                 password: '111',
                 ~~~~~~~~
                 name: 'Adrian',
                 lastName: 'abadin',
                 ~~~~~~~~
                 phoneNumber: 15,
                 ~~~~~~~~~~~
             +   description: String,
             +   stock: Int,
             +   price: Int,
             +   rate: Int,
             +   category: String,
             ?   id?: String,
             ?   createdAt?: DateTime,
             ?   updatedAt?: DateTime
               }
             })
    
    Unknown arg `username` in data.username for type productsCreateInput. Did you mean `name`?
    Unknown arg `password` in data.password for type productsCreateInput. Did you mean `category`?
    Unknown arg `lastName` in data.lastName for type productsCreateInput. Did you mean `name`?
    Unknown arg `phoneNumber` in data.phoneNumber for type productsCreateInput.
    Argument description for data.description is missing.
    Argument stock for data.stock is missing.
    Argument price for data.price is missing.
    Argument rate for data.rate is missing.
    Argument category for data.category is missing.
    
    Note: Lines with + are required, lines with ? are optional.
    
        at mi.validate (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:149:91)
        at tn.createMessage (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:166:1205)
        at /run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10962
        at runInChildSpan (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:70:25817)
        at t._executeRequest (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10951)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      clientVersion: '4.13.0'
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: " ", length 1 for the field 'id'.
        at pn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:176:6477)
        at pn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:176:5907)
        at pn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:176:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      code: 'P2023',
      clientVersion: '4.13.0',
      meta: {
        message: `Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: " ", length 1 for the field 'id'.`
      }
    }
  },
  level: 'error'
}
{
  message: {
    level: 'error',
    function: 'UsersService.create()',
    error: PrismaClientKnownRequestError: 
    Invalid `this.prisma.create()` invocation in
    /run/media/adrianabadin/code/backend_DesafioFinal/users/users.service.ts:15:44
    
      12 public create = async (createUserDto: CreateUsersDto): Promise<IResponse> => {
      13   if ('password' in createUserDto) delete createUserDto?.password
      14   try {
    → 15     const response = await this.prisma.create(
    Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: " ", length 1 for the field 'id'.
        at pn.handleRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:176:6477)
        at pn.handleAndLogRequestError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:176:5907)
        at pn.request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:176:5786)
        at t._request (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/@prisma/client/runtime/library.js:179:10484) {
      code: 'P2023',
      clientVersion: '4.13.0',
      meta: {
        message: `Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: " ", length 1 for the field 'id'.`
      }
    }
  },
  level: 'error'
}
{
  message: {
    function: 'nodemailer.service',
    error: Error: Invalid login: 535-5.7.8 Username and Password not accepted. Learn more at
    535 5.7.8  https://support.google.com/mail/?p=BadCredentials h42-20020a056870172a00b001762ce27f9asm9641492oae.23 - gsmtp
        at SMTPConnection._formatError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:790:19)
        at SMTPConnection._actionAUTHComplete (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:1548:34)
        at SMTPConnection.<anonymous> (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:546:26)
        at SMTPConnection._processResponse (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:953:20)
        at SMTPConnection._onData (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:755:14)
        at TLSSocket.SMTPConnection._onSocketData (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:193:44)
        at TLSSocket.emit (node:events:513:28)
        at addChunk (node:internal/streams/readable:324:12)
        at readableAddChunk (node:internal/streams/readable:297:9)
        at TLSSocket.Readable.push (node:internal/streams/readable:234:10) {
      code: 'EAUTH',
      response: '535-5.7.8 Username and Password not accepted. Learn more at\n' +
        '535 5.7.8  https://support.google.com/mail/?p=BadCredentials h42-20020a056870172a00b001762ce27f9asm9641492oae.23 - gsmtp',
      responseCode: 535,
      command: 'AUTH PLAIN'
    }
  },
  level: 'error'
}
{
  message: {
    function: 'nodemailer.service',
    error: Error: Invalid login: 535-5.7.8 Username and Password not accepted. Learn more at
    535 5.7.8  https://support.google.com/mail/?p=BadCredentials u7-20020a056870440700b0017fea9c156esm9531626oah.18 - gsmtp
        at SMTPConnection._formatError (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:790:19)
        at SMTPConnection._actionAUTHComplete (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:1548:34)
        at SMTPConnection.<anonymous> (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:546:26)
        at SMTPConnection._processResponse (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:953:20)
        at SMTPConnection._onData (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:755:14)
        at TLSSocket.SMTPConnection._onSocketData (/run/media/adrianabadin/code/backend_DesafioFinal/node_modules/nodemailer/lib/smtp-connection/index.js:193:44)
        at TLSSocket.emit (node:events:513:28)
        at addChunk (node:internal/streams/readable:324:12)
        at readableAddChunk (node:internal/streams/readable:297:9)
        at TLSSocket.Readable.push (node:internal/streams/readable:234:10) {
      code: 'EAUTH',
      response: '535-5.7.8 Username and Password not accepted. Learn more at\n' +
        '535 5.7.8  https://support.google.com/mail/?p=BadCredentials u7-20020a056870440700b0017fea9c156esm9531626oah.18 - gsmtp',
      responseCode: 535,
      command: 'AUTH PLAIN'
    }
  },
  level: 'error'
}
{
  message: { function: 'nodemailer.service', error: null },
  level: 'error'
}
{
  message: { function: 'nodemailer.service', error: null },
  level: 'error'
}
{
  message: { function: 'nodemailer.service', error: null },
  level: 'error'
}
{
  message: { function: 'nodemailer.service', error: null },
  level: 'error'
}
